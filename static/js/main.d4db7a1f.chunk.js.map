{"version":3,"sources":["components/shared/Footer.tsx","components/shared/Header.tsx","api/agent.ts","store/slices/todoSlice.ts","components/todo/TodoForm.tsx","components/todo/TodoTable.tsx","components/shared/Main.tsx","App.tsx","store/index.ts","index.tsx"],"names":["Footer","Header","Container","className","Row","Col","agent","todo","getTodos","axios","get","getTodosAsync","createAsyncThunk","a","response","data","todoSlice","createSlice","name","initialState","todos","isLoading","error","reducers","addTodo","state","action","push","payload","deleteTodo","filter","x","id","extraReducers","builder","addCase","pending","fulfilled","console","log","concat","rejected","message","actions","TodoForm","useState","setId","formInitialValues","title","completed","dispatch","useDispatch","fetchTodos","err","initialValues","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","resetForm","handleSubmit","handleChange","handleBlur","isSubmitting","errors","xs","md","InputGroup","hasValidation","Text","Control","type","value","onChange","isInvalid","Feedback","Group","controlId","Check","label","onBlur","checked","Button","variant","disabled","onClick","TodoTable","todoArr","useSelector","Table","striped","bordered","responsive","hover","length","map","item","index","icon","faCheck","faTimes","faTrash","todoId","Swal","fire","text","showCancelButton","buttonsStyling","customClass","confirmButton","cancelButton","confirmButtonText","then","result","isConfirmed","showConfirmButton","Main","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4db7a1f.chunk.js","sourcesContent":["export const Footer = () => {\r\n  return <footer></footer>;\r\n};\r\n","import { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header>\r\n      <Container className=\"py-3\">\r\n        <Row>\r\n          <Col>\r\n            {/* <div className=\"text-center\">\r\n              Welcome to my Todo App Implemented with React, Redux-toolkit,\r\n              Typescript, Scss and Bootstrap 5\r\n            </div> */}\r\n            <div className=\"text-center\">Hey whats up</div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://jsonplaceholder.typicode.com\";\r\n\r\n//functions to make api calls\r\nconst agent = {\r\n  todo: {\r\n    getTodos: () => {\r\n      return axios.get(`${baseUrl}/todos`);\r\n    },\r\n  },\r\n};\r\nexport default agent;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport agent from \"../../api/agent\";\r\nimport { ITodo } from \"../../models\";\r\n\r\ninterface IInitialState {\r\n  todos: ITodo[];\r\n  isLoading: boolean;\r\n  error: string | undefined;\r\n}\r\n\r\nconst initialState: IInitialState = { todos: [], isLoading: false, error: \"\" };\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/fetchTodos\",\r\n  async (): Promise<ITodo[]> => {\r\n    const response = await agent.todo.getTodos();\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    addTodo: (state, action: PayloadAction<ITodo>) => {\r\n      state.isLoading = true;\r\n      state.todos.push(action.payload);\r\n      state.isLoading = false;\r\n    },\r\n    deleteTodo: (state, { payload }: PayloadAction<number>) => {\r\n      state.isLoading = true;\r\n      state.todos = state.todos.filter((x) => x.id !== payload);\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getTodosAsync.pending, (state, { payload }) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getTodosAsync.fulfilled, (state, { payload }) => {\r\n        console.log(payload, \"here is the payload\");\r\n        state.isLoading = false;\r\n        state.todos = state.todos.concat(payload);\r\n      })\r\n      .addCase(getTodosAsync.rejected, (state, { error }) => {\r\n        state.isLoading = false;\r\n        state.error = error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addTodo, deleteTodo } = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;\r\n","import { ITodo } from \"../../models\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Col,\r\n  Form as BootstrapForm,\r\n  InputGroup,\r\n  Row,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport * as Yup from \"yup\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { addTodo, getTodosAsync } from \"../../store/slices/todoSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n\r\ninterface IProps {}\r\n\r\nconst TodoForm: React.FC<IProps> = () => {\r\n  const [id, setId] = useState<number>(1);\r\n  const formInitialValues: ITodo = { id, title: \"\", completed: false };\r\n  const dispatch = useDispatch();\r\n  const fetchTodos = async () => {\r\n    try {\r\n      dispatch(getTodosAsync());\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={formInitialValues}\r\n      validationSchema={Yup.object({\r\n        title: Yup.string()\r\n          .max(15, \"Must be 15 characters or less!\")\r\n          .required(\"Please enter the title!\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        const newId = id + 1;\r\n        setId(newId);\r\n        values = { ...values, id };\r\n        dispatch(addTodo(values));\r\n        resetForm();\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        isSubmitting,\r\n        values,\r\n        errors,\r\n      }) => (\r\n        <BootstrapForm className=\"mb-3\" onSubmit={handleSubmit}>\r\n          <Row>\r\n            <Col xs={12} md={4}>\r\n              <InputGroup hasValidation className=\"mb-3 mb-md-0\">\r\n                <InputGroup.Text>Title</InputGroup.Text>\r\n                <BootstrapForm.Control\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={values.title}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.title}\r\n                />\r\n                <BootstrapForm.Control.Feedback type=\"invalid\">\r\n                  {errors.title}\r\n                </BootstrapForm.Control.Feedback>\r\n              </InputGroup>\r\n            </Col>\r\n            <Col xs={12} md={2} className=\"d-flex\">\r\n              <BootstrapForm.Group\r\n                className=\"my-auto mb-3 mb-md-0\"\r\n                controlId=\"formIsCompleted\"\r\n              >\r\n                <BootstrapForm.Check\r\n                  type=\"checkbox\"\r\n                  label=\"Is it Completed?\"\r\n                  name=\"completed\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  checked={values.completed}\r\n                />\r\n              </BootstrapForm.Group>\r\n            </Col>\r\n            <Col xs={12} md={1}>\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                className=\" mb-3 mb-md-0\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button variant=\"secondary\" type=\"button\" onClick={fetchTodos}>\r\n                Fetch Some Todos From API\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </BootstrapForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import { Table } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTimes, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\nimport { deleteTodo } from \"../../store/slices/todoSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ninterface IProps {}\r\n\r\nconst TodoTable: React.FC<IProps> = () => {\r\n  const dispatch = useDispatch();\r\n  const todoArr = useSelector((state: RootState) => state.todoSlice.todos);\r\n  const handleDeleteTodo = (todoId: number) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      buttonsStyling: false,\r\n      customClass: {\r\n        confirmButton: \"btn btn-danger\",\r\n        cancelButton: \"btn btn-outline-secondary ms-3\",\r\n      },\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        dispatch(deleteTodo(todoId));\r\n        Swal.fire({\r\n          title: \"Successfully Deleted\",\r\n          icon: \"success\",\r\n          showConfirmButton: true,\r\n          buttonsStyling: false,\r\n          customClass: {\r\n            confirmButton: \"btn btn-primary\",\r\n          },\r\n          confirmButtonText: \"Ok!\",\r\n        });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        striped\r\n        bordered\r\n        responsive\r\n        hover\r\n        variant=\"dark\"\r\n        className=\"todo-table\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">ID</th>\r\n            <th className=\"text-center\">Title</th>\r\n            <th className=\"text-center\">IsCompleted</th>\r\n            <th className=\"text-center\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {todoArr.length > 0 &&\r\n            todoArr.map((item, index) => (\r\n              <tr key={index}>\r\n                <td className=\"text-center\">{item.id}</td>\r\n                <td className=\"text-center\">{item.title}</td>\r\n                <td className=\"text-center\">\r\n                  {item.completed ? (\r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                  ) : (\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                  )}\r\n                </td>\r\n                <td className=\"text-center\">\r\n                  <FontAwesomeIcon\r\n                    className=\"delete-icon\"\r\n                    icon={faTrash}\r\n                    title=\"Delete\"\r\n                    onClick={() => {\r\n                      handleDeleteTodo(item.id);\r\n                    }}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoTable;\r\n","import { useState } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { ITodo } from \"../../models\";\r\nimport TodoForm from \"../todo/TodoForm\";\r\nimport TodoTable from \"../todo/TodoTable\";\r\n\r\nconst Main = () => {\r\n  // const [todoArr, setTodoArr] = useState<ITodo[]>([]);\r\n  // const handleTodoDelete = (todoId: number) => {\r\n  //   if (!!todoId) {\r\n  //     if (window.confirm(\"Do you really want to delete this record?\"))\r\n  //       setTodoArr([...todoArr.filter((x) => x.id !== todoId)]);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <main>\r\n      <Container className=\"pt-5\">\r\n        <Row>\r\n          <Col>\r\n            <TodoForm />\r\n            {/* <TodoTable handleTodoDelete={handleTodoDelete} /> */}\r\n            <TodoTable />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { Footer } from \"./components/shared/Footer\";\nimport { Header } from \"./components/shared/Header\";\nimport Main from \"./components/shared/Main\";\nimport \"./resources/global.scss\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoSlice from \"./slices/todoSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    todoSlice,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}